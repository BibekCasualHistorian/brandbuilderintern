"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-switch";
exports.ids = ["vendor-chunks/react-switch"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-switch/dist/index.dev.mjs":
/*!******************************************************!*\
  !*** ./node_modules/react-switch/dist/index.dev.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReactSwitch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2015 instructure-react\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/ var uncheckedIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    viewBox: \"-2 -5 14 20\",\n    height: \"100%\",\n    width: \"100%\",\n    style: {\n        position: \"absolute\",\n        top: 0\n    }\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n}));\nvar checkedIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    height: \"100%\",\n    width: \"100%\",\n    viewBox: \"-2 -5 17 21\",\n    style: {\n        position: \"absolute\",\n        top: 0\n    }\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n}));\nfunction createBackgroundColor(pos, checkedPos, uncheckedPos, offColor, onColor) {\n    var relativePos = (pos - uncheckedPos) / (checkedPos - uncheckedPos);\n    if (relativePos === 0) {\n        return offColor;\n    }\n    if (relativePos === 1) {\n        return onColor;\n    }\n    var newColor = \"#\";\n    for(var i = 1; i < 6; i += 2){\n        var offComponent = parseInt(offColor.substr(i, 2), 16);\n        var onComponent = parseInt(onColor.substr(i, 2), 16);\n        var weightedValue = Math.round((1 - relativePos) * offComponent + relativePos * onComponent);\n        var newComponent = weightedValue.toString(16);\n        if (newComponent.length === 1) {\n            newComponent = \"0\" + newComponent;\n        }\n        newColor += newComponent;\n    }\n    return newColor;\n}\nfunction convertShorthandColor(color) {\n    if (color.length === 7) {\n        return color;\n    }\n    var sixDigitColor = \"#\";\n    for(var i = 1; i < 4; i += 1){\n        sixDigitColor += color[i] + color[i];\n    }\n    return sixDigitColor;\n}\nfunction getBackgroundColor(pos, checkedPos, uncheckedPos, offColor, onColor) {\n    var sixDigitOffColor = convertShorthandColor(offColor);\n    var sixDigitOnColor = convertShorthandColor(onColor);\n    return createBackgroundColor(pos, checkedPos, uncheckedPos, sixDigitOffColor, sixDigitOnColor);\n}\n// Make sure color props are strings that start with \"#\" since other ways to write colors are not supported.\nvar hexColorPropType = function(props, propName, componentName) {\n    var prop = props[propName];\n    if (typeof prop !== \"string\" || prop[0] !== \"#\" || prop.length !== 4 && prop.length !== 7) {\n        return new Error(\"Invalid prop '\" + propName + \"' supplied to '\" + componentName + \"'. '\" + propName + \"' has to be either a 3-digit or 6-digit hex-color string. Valid examples: '#abc', '#123456'\");\n    }\n    return null;\n};\nfunction objectWithoutProperties(obj, exclude) {\n    var target = {};\n    for(var k in obj)if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n    return target;\n}\nvar ReactSwitch = /*@__PURE__*/ function(Component) {\n    function ReactSwitch(props) {\n        Component.call(this, props);\n        var height = props.height;\n        var width = props.width;\n        var handleDiameter = props.handleDiameter;\n        var checked = props.checked;\n        this.$handleDiameter = handleDiameter || height - 2;\n        this.$checkedPos = Math.max(width - height, width - (height + this.$handleDiameter) / 2);\n        this.$uncheckedPos = Math.max(0, (height - this.$handleDiameter) / 2);\n        this.state = {\n            $pos: checked ? this.$checkedPos : this.$uncheckedPos\n        };\n        this.$lastDragAt = 0;\n        this.$lastKeyUpAt = 0;\n        this.$onMouseDown = this.$onMouseDown.bind(this);\n        this.$onMouseMove = this.$onMouseMove.bind(this);\n        this.$onMouseUp = this.$onMouseUp.bind(this);\n        this.$onTouchStart = this.$onTouchStart.bind(this);\n        this.$onTouchMove = this.$onTouchMove.bind(this);\n        this.$onTouchEnd = this.$onTouchEnd.bind(this);\n        this.$onClick = this.$onClick.bind(this);\n        this.$onInputChange = this.$onInputChange.bind(this);\n        this.$onKeyUp = this.$onKeyUp.bind(this);\n        this.$setHasOutline = this.$setHasOutline.bind(this);\n        this.$unsetHasOutline = this.$unsetHasOutline.bind(this);\n        this.$getInputRef = this.$getInputRef.bind(this);\n    }\n    if (Component) ReactSwitch.__proto__ = Component;\n    ReactSwitch.prototype = Object.create(Component && Component.prototype);\n    ReactSwitch.prototype.constructor = ReactSwitch;\n    ReactSwitch.prototype.componentDidMount = function componentDidMount() {\n        this.$isMounted = true;\n    };\n    ReactSwitch.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n        if (prevProps.checked === this.props.checked) {\n            return;\n        }\n        var $pos = this.props.checked ? this.$checkedPos : this.$uncheckedPos;\n        this.setState({\n            $pos: $pos\n        });\n    };\n    ReactSwitch.prototype.componentWillUnmount = function componentWillUnmount() {\n        this.$isMounted = false;\n    };\n    ReactSwitch.prototype.$onDragStart = function $onDragStart(clientX) {\n        this.$inputRef.focus();\n        this.setState({\n            $startX: clientX,\n            $hasOutline: true,\n            $dragStartingTime: Date.now()\n        });\n    };\n    ReactSwitch.prototype.$onDrag = function $onDrag(clientX) {\n        var ref = this.state;\n        var $startX = ref.$startX;\n        var $isDragging = ref.$isDragging;\n        var $pos = ref.$pos;\n        var ref$1 = this.props;\n        var checked = ref$1.checked;\n        var startPos = checked ? this.$checkedPos : this.$uncheckedPos;\n        var mousePos = startPos + clientX - $startX; // We need this check to fix a windows glitch where onDrag is triggered onMouseDown in some cases\n        if (!$isDragging && clientX !== $startX) {\n            this.setState({\n                $isDragging: true\n            });\n        }\n        var newPos = Math.min(this.$checkedPos, Math.max(this.$uncheckedPos, mousePos)); // Prevent unnecessary rerenders\n        if (newPos !== $pos) {\n            this.setState({\n                $pos: newPos\n            });\n        }\n    };\n    ReactSwitch.prototype.$onDragStop = function $onDragStop(event) {\n        var ref = this.state;\n        var $pos = ref.$pos;\n        var $isDragging = ref.$isDragging;\n        var $dragStartingTime = ref.$dragStartingTime;\n        var ref$1 = this.props;\n        var checked = ref$1.checked;\n        var halfwayCheckpoint = (this.$checkedPos + this.$uncheckedPos) / 2;\n        /*\n      Set position state back to the previous position even if user drags the switch with intention to change the state.\n      This is to prevent the switch from getting stuck in the middle if the event isn't handled in the onChange callback.\n    */ var prevPos = this.props.checked ? this.$checkedPos : this.$uncheckedPos;\n        this.setState({\n            $pos: prevPos\n        }); // Act as if the user clicked the handle if they didn't drag it _or_ the dragged it for less than 250ms\n        var timeSinceStart = Date.now() - $dragStartingTime;\n        var isSimulatedClick = !$isDragging || timeSinceStart < 250; // Handle when the user has dragged the switch more than halfway from either side\n        var isDraggedHalfway = checked && $pos <= halfwayCheckpoint || !checked && $pos >= halfwayCheckpoint;\n        if (isSimulatedClick || isDraggedHalfway) {\n            this.$onChange(event);\n        }\n        if (this.$isMounted) {\n            this.setState({\n                $isDragging: false,\n                $hasOutline: false\n            });\n        }\n        this.$lastDragAt = Date.now();\n    };\n    ReactSwitch.prototype.$onMouseDown = function $onMouseDown(event) {\n        event.preventDefault(); // Ignore right click and scroll\n        if (typeof event.button === \"number\" && event.button !== 0) {\n            return;\n        }\n        this.$onDragStart(event.clientX);\n        window.addEventListener(\"mousemove\", this.$onMouseMove);\n        window.addEventListener(\"mouseup\", this.$onMouseUp);\n    };\n    ReactSwitch.prototype.$onMouseMove = function $onMouseMove(event) {\n        event.preventDefault();\n        this.$onDrag(event.clientX);\n    };\n    ReactSwitch.prototype.$onMouseUp = function $onMouseUp(event) {\n        this.$onDragStop(event);\n        window.removeEventListener(\"mousemove\", this.$onMouseMove);\n        window.removeEventListener(\"mouseup\", this.$onMouseUp);\n    };\n    ReactSwitch.prototype.$onTouchStart = function $onTouchStart(event) {\n        this.$checkedStateFromDragging = null;\n        this.$onDragStart(event.touches[0].clientX);\n    };\n    ReactSwitch.prototype.$onTouchMove = function $onTouchMove(event) {\n        this.$onDrag(event.touches[0].clientX);\n    };\n    ReactSwitch.prototype.$onTouchEnd = function $onTouchEnd(event) {\n        event.preventDefault();\n        this.$onDragStop(event);\n    };\n    ReactSwitch.prototype.$onInputChange = function $onInputChange(event) {\n        // This condition is unfortunately needed in some browsers where the input's change event might get triggered\n        // right after the dragstop event is triggered (occurs when dropping over a label element)\n        if (Date.now() - this.$lastDragAt > 50) {\n            this.$onChange(event); // Prevent clicking label, but not key activation from setting outline to true - yes, this is absurd\n            if (Date.now() - this.$lastKeyUpAt > 50) {\n                if (this.$isMounted) {\n                    this.setState({\n                        $hasOutline: false\n                    });\n                }\n            }\n        }\n    };\n    ReactSwitch.prototype.$onKeyUp = function $onKeyUp() {\n        this.$lastKeyUpAt = Date.now();\n    };\n    ReactSwitch.prototype.$setHasOutline = function $setHasOutline() {\n        this.setState({\n            $hasOutline: true\n        });\n    };\n    ReactSwitch.prototype.$unsetHasOutline = function $unsetHasOutline() {\n        this.setState({\n            $hasOutline: false\n        });\n    };\n    ReactSwitch.prototype.$getInputRef = function $getInputRef(el) {\n        this.$inputRef = el;\n    };\n    ReactSwitch.prototype.$onClick = function $onClick(event) {\n        event.preventDefault();\n        this.$inputRef.focus();\n        this.$onChange(event);\n        if (this.$isMounted) {\n            this.setState({\n                $hasOutline: false\n            });\n        }\n    };\n    ReactSwitch.prototype.$onChange = function $onChange(event) {\n        var ref = this.props;\n        var checked = ref.checked;\n        var onChange = ref.onChange;\n        var id = ref.id;\n        onChange(!checked, event, id);\n    };\n    ReactSwitch.prototype.render = function render() {\n        var ref = this.props;\n        var checked = ref.checked;\n        var disabled = ref.disabled;\n        var className = ref.className;\n        var offColor = ref.offColor;\n        var onColor = ref.onColor;\n        var offHandleColor = ref.offHandleColor;\n        var onHandleColor = ref.onHandleColor;\n        var checkedIcon = ref.checkedIcon;\n        var uncheckedIcon = ref.uncheckedIcon;\n        var checkedHandleIcon = ref.checkedHandleIcon;\n        var uncheckedHandleIcon = ref.uncheckedHandleIcon;\n        var boxShadow = ref.boxShadow;\n        var activeBoxShadow = ref.activeBoxShadow;\n        var height = ref.height;\n        var width = ref.width;\n        var borderRadius = ref.borderRadius;\n        ref.handleDiameter;\n        var rest$1 = objectWithoutProperties(ref, [\n            \"checked\",\n            \"disabled\",\n            \"className\",\n            \"offColor\",\n            \"onColor\",\n            \"offHandleColor\",\n            \"onHandleColor\",\n            \"checkedIcon\",\n            \"uncheckedIcon\",\n            \"checkedHandleIcon\",\n            \"uncheckedHandleIcon\",\n            \"boxShadow\",\n            \"activeBoxShadow\",\n            \"height\",\n            \"width\",\n            \"borderRadius\",\n            \"handleDiameter\"\n        ]);\n        var rest = rest$1;\n        var ref$1 = this.state;\n        var $pos = ref$1.$pos;\n        var $isDragging = ref$1.$isDragging;\n        var $hasOutline = ref$1.$hasOutline;\n        var rootStyle = {\n            position: \"relative\",\n            display: \"inline-block\",\n            textAlign: \"left\",\n            opacity: disabled ? 0.5 : 1,\n            direction: \"ltr\",\n            borderRadius: height / 2,\n            WebkitTransition: \"opacity 0.25s\",\n            MozTransition: \"opacity 0.25s\",\n            transition: \"opacity 0.25s\",\n            touchAction: \"none\",\n            WebkitTapHighlightColor: \"rgba(0, 0, 0, 0)\",\n            WebkitUserSelect: \"none\",\n            MozUserSelect: \"none\",\n            msUserSelect: \"none\",\n            userSelect: \"none\"\n        };\n        var backgroundStyle = {\n            height: height,\n            width: width,\n            margin: Math.max(0, (this.$handleDiameter - height) / 2),\n            position: \"relative\",\n            background: getBackgroundColor($pos, this.$checkedPos, this.$uncheckedPos, offColor, onColor),\n            borderRadius: typeof borderRadius === \"number\" ? borderRadius : height / 2,\n            cursor: disabled ? \"default\" : \"pointer\",\n            WebkitTransition: $isDragging ? null : \"background 0.25s\",\n            MozTransition: $isDragging ? null : \"background 0.25s\",\n            transition: $isDragging ? null : \"background 0.25s\"\n        };\n        var checkedIconStyle = {\n            height: height,\n            width: Math.min(height * 1.5, width - (this.$handleDiameter + height) / 2 + 1),\n            position: \"relative\",\n            opacity: ($pos - this.$uncheckedPos) / (this.$checkedPos - this.$uncheckedPos),\n            pointerEvents: \"none\",\n            WebkitTransition: $isDragging ? null : \"opacity 0.25s\",\n            MozTransition: $isDragging ? null : \"opacity 0.25s\",\n            transition: $isDragging ? null : \"opacity 0.25s\"\n        };\n        var uncheckedIconStyle = {\n            height: height,\n            width: Math.min(height * 1.5, width - (this.$handleDiameter + height) / 2 + 1),\n            position: \"absolute\",\n            opacity: 1 - ($pos - this.$uncheckedPos) / (this.$checkedPos - this.$uncheckedPos),\n            right: 0,\n            top: 0,\n            pointerEvents: \"none\",\n            WebkitTransition: $isDragging ? null : \"opacity 0.25s\",\n            MozTransition: $isDragging ? null : \"opacity 0.25s\",\n            transition: $isDragging ? null : \"opacity 0.25s\"\n        };\n        var handleStyle = {\n            height: this.$handleDiameter,\n            width: this.$handleDiameter,\n            background: getBackgroundColor($pos, this.$checkedPos, this.$uncheckedPos, offHandleColor, onHandleColor),\n            display: \"inline-block\",\n            cursor: disabled ? \"default\" : \"pointer\",\n            borderRadius: typeof borderRadius === \"number\" ? borderRadius - 1 : \"50%\",\n            position: \"absolute\",\n            transform: \"translateX(\" + $pos + \"px)\",\n            top: Math.max(0, (height - this.$handleDiameter) / 2),\n            outline: 0,\n            boxShadow: $hasOutline ? activeBoxShadow : boxShadow,\n            border: 0,\n            WebkitTransition: $isDragging ? null : \"background-color 0.25s, transform 0.25s, box-shadow 0.15s\",\n            MozTransition: $isDragging ? null : \"background-color 0.25s, transform 0.25s, box-shadow 0.15s\",\n            transition: $isDragging ? null : \"background-color 0.25s, transform 0.25s, box-shadow 0.15s\"\n        };\n        var uncheckedHandleIconStyle = {\n            height: this.$handleDiameter,\n            width: this.$handleDiameter,\n            opacity: Math.max((1 - ($pos - this.$uncheckedPos) / (this.$checkedPos - this.$uncheckedPos) - 0.5) * 2, 0),\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            pointerEvents: \"none\",\n            WebkitTransition: $isDragging ? null : \"opacity 0.25s\",\n            MozTransition: $isDragging ? null : \"opacity 0.25s\",\n            transition: $isDragging ? null : \"opacity 0.25s\"\n        };\n        var checkedHandleIconStyle = {\n            height: this.$handleDiameter,\n            width: this.$handleDiameter,\n            opacity: Math.max((($pos - this.$uncheckedPos) / (this.$checkedPos - this.$uncheckedPos) - 0.5) * 2, 0),\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            pointerEvents: \"none\",\n            WebkitTransition: $isDragging ? null : \"opacity 0.25s\",\n            MozTransition: $isDragging ? null : \"opacity 0.25s\",\n            transition: $isDragging ? null : \"opacity 0.25s\"\n        };\n        var inputStyle = {\n            border: 0,\n            clip: \"rect(0 0 0 0)\",\n            height: 1,\n            margin: -1,\n            overflow: \"hidden\",\n            padding: 0,\n            position: \"absolute\",\n            width: 1\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: className,\n            style: rootStyle\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"react-switch-bg\",\n            style: backgroundStyle,\n            onClick: disabled ? null : this.$onClick,\n            onMouseDown: function(e) {\n                return e.preventDefault();\n            }\n        }, checkedIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: checkedIconStyle\n        }, checkedIcon), uncheckedIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: uncheckedIconStyle\n        }, uncheckedIcon)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"react-switch-handle\",\n            style: handleStyle,\n            onClick: function(e) {\n                return e.preventDefault();\n            },\n            onMouseDown: disabled ? null : this.$onMouseDown,\n            onTouchStart: disabled ? null : this.$onTouchStart,\n            onTouchMove: disabled ? null : this.$onTouchMove,\n            onTouchEnd: disabled ? null : this.$onTouchEnd,\n            onTouchCancel: disabled ? null : this.$unsetHasOutline\n        }, uncheckedHandleIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: uncheckedHandleIconStyle\n        }, uncheckedHandleIcon), checkedHandleIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: checkedHandleIconStyle\n        }, checkedHandleIcon)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", _extends({}, {\n            type: \"checkbox\",\n            role: \"switch\",\n            \"aria-checked\": checked,\n            checked: checked,\n            disabled: disabled,\n            style: inputStyle\n        }, rest, {\n            ref: this.$getInputRef,\n            onFocus: this.$setHasOutline,\n            onBlur: this.$unsetHasOutline,\n            onKeyUp: this.$onKeyUp,\n            onChange: this.$onInputChange\n        })));\n    };\n    return ReactSwitch;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\nReactSwitch.propTypes = {\n    checked: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool.isRequired,\n    onChange: prop_types__WEBPACK_IMPORTED_MODULE_1__.func.isRequired,\n    disabled: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n    offColor: hexColorPropType,\n    onColor: hexColorPropType,\n    offHandleColor: hexColorPropType,\n    onHandleColor: hexColorPropType,\n    handleDiameter: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    uncheckedIcon: prop_types__WEBPACK_IMPORTED_MODULE_1__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.element\n    ]),\n    checkedIcon: prop_types__WEBPACK_IMPORTED_MODULE_1__.oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.element\n    ]),\n    boxShadow: prop_types__WEBPACK_IMPORTED_MODULE_1__.string,\n    borderRadius: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    activeBoxShadow: prop_types__WEBPACK_IMPORTED_MODULE_1__.string,\n    uncheckedHandleIcon: prop_types__WEBPACK_IMPORTED_MODULE_1__.element,\n    checkedHandleIcon: prop_types__WEBPACK_IMPORTED_MODULE_1__.element,\n    height: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    width: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    id: prop_types__WEBPACK_IMPORTED_MODULE_1__.string,\n    className: prop_types__WEBPACK_IMPORTED_MODULE_1__.string\n};\nReactSwitch.defaultProps = {\n    disabled: false,\n    offColor: \"#888\",\n    onColor: \"#080\",\n    offHandleColor: \"#fff\",\n    onHandleColor: \"#fff\",\n    uncheckedIcon: uncheckedIcon,\n    checkedIcon: checkedIcon,\n    boxShadow: null,\n    activeBoxShadow: \"0 0 2px 3px #3bf\",\n    height: 28,\n    width: 56\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-switch/dist/index.dev.mjs\n");

/***/ })

};
;